speed_summary$se = as.data.frame(top_model[3])
speed_summary$CI_lower = as.data.frame(top_model[6])
speed_summary$CI_upper = as.data.frame(top_model[7])
speed_summary = speed_summary[-c(1),]
speed_summary
#Generating a quick plot to visualize effect sizes as a forest plot
ggplot(data=speed_summary,aes(x=beta, y= Effect))+
geom_point()
ggplot(data=speed_summary,aes(x=beta, y= Effect))+
geom_point()+
geom_vline(xintercept = 0, linetype="dotted", color="red")
#Generating a quick plot to visualize effect sizes as a forest plot
ggplot(data=speed_summary,aes(x=beta, y= Effect))+
geom_point()+
geom_vline(xintercept = 0, linetype="dotted", color="red", size=1.5)
ggplot(data=speed_summary,aes(x=beta, y= Effect))+
geom_point()+
geom_vline(xintercept = 0, linetype="dotted", color="red", size=1.5.)+
geom_errorbar(aes(xmin=ci.lb))
ggplot(data=speed_summary,aes(x=beta, y= Effect))+
geom_point()+
geom_vline(xintercept = 0, linetype="dotted", color="red", size=1.5)+
geom_errorbar(aes(xmin=ci.lb))
head(speed_summary)
#Generating a quick plot to visualize effect sizes as a forest plot
ggplot(data=speed_summary,aes(x=beta, y= Effect))+
geom_point()+
geom_vline(xintercept = 0, linetype="dotted", color="red", size=1.5)
speed_summary=as.data.frame(speed_summary)
head(speed_summary)
str(speed_summary)
ggplot(data=speed_summary,aes(x=beta, y= Effect))+
geom_point()+
geom_vline(xintercept = 0, linetype="dotted", color="red", size=1.5)+
geom_errorbar(aes(xmin=CI_lower))
top_model = meta_speed14
speed_summary = as.data.frame(top_model[2])
speed_summary <- as.data.frame(tibble::rownames_to_column(speed_summary, "Effect"))
speed_summary$se = as.data.frame(top_model[3])
speed_summary$CI_lower = as.list(top_model[6])
speed_summary$CI_upper = as.list(top_model[7])
head(speed_summary)
str(speed_summary)
top_model = meta_speed14
speed_summary = as.data.frame(top_model[2])
speed_summary <- as.data.frame(tibble::rownames_to_column(speed_summary, "Effect"))
speed_summary
speed_summary$se = top_model[3]
speed_summary
top_model
#Model Summary
top_model = summary(meta_speed14)
top_model
#Model Summary
top_model = meta_speed14
speed_summary = as.data.frame(top_model[2])
speed_summary
speed_summary <- as.data.frame(tibble::rownames_to_column(speed_summary, "Effect"))
speed_summary
top_model[2]]
top_model[2]
str(top_model)
speed_summary$se = top_model$se
speed_summary)
speed_summary
#Model Summary
top_model = meta_speed14
speed_summary = as.data.frame(top_model[2])
speed_summary <- as.data.frame(tibble::rownames_to_column(speed_summary, "Effect"))
speed_summary$se = top_model[3]
speed_summary$se = top_model$se
speed_summary$CI_lower = top_model$ci.lb
speed_summary$CI_upper = top_model$ci.ub
speed_summary
#Remove the intercept from the model
#Remove the intercept from the model
speed_summary = speed_summary[-c(1),]
speed_summary=as.data.frame(speed_summary)
#Generating a quick plot to visualize effect sizes as a forest plot
ggplot(data=speed_summary,aes(x=beta, y= Effect))+
geom_point()+
geom_vline(xintercept = 0, linetype="dotted", color="red", size=1.5)+
geom_errorbar(aes(xmin=CI_lower))
ggplot(data=speed_summary,aes(x=beta, y= Effect))+
geom_point()+
geom_vline(xintercept = 0, linetype="dotted", color="red", size=1.5)+
geom_errorbar(aes(xmin = CI_lower, xmax =CI_upper))
ggplot(data=speed_summary,aes(x=beta, y= Effect))+
geom_point()+
geom_vline(xintercept = 0, linetype="dotted", color="red", size=1.5)+
geom_errorbar(aes(xmin = CI_lower, xmax =CI_upper))+
xlab("Effect Size")+
ylab("Covariate")+
#xlim(0,600) #excluding point estimates above 600km2 in the graph just so we can visually inspect the smaller sizes
#theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
ggtitle("AKDE_95 Size")
#Model Summary
top_model1 = meta14
speed_summary = as.data.frame(top_model1[2])
akde_summary <- as.data.frame(tibble::rownames_to_column(akde_summary, "Effect"))
akde_summary$se = top_model1[3]
akde_summary$se = top_model1$se
akde_summary$CI_lower = top_model1$ci.lb
akde_summary$CI_upper = top_model1$ci.ub
#Model Summary
top_model1 = meta14
akde_summary = as.data.frame(top_model1[2])
akde_summary <- as.data.frame(tibble::rownames_to_column(akde_summary, "Effect"))
akde_summary$se = top_model1[3]
akde_summary$se = top_model1$se
akde_summary$CI_lower = top_model1$ci.lb
akde_summary$CI_upper = top_model1$ci.ub
#Generating a quick plot to visualize effect sizes as a forest plot
ggplot(data=akde_summary,aes(x=beta, y= Effect))+
geom_point()+
geom_vline(xintercept = 0, linetype="dotted", color="red", size=1.5)+
geom_errorbar(aes(xmin = CI_lower, xmax =CI_upper))+
xlab("Effect Size on 95% AKDE")+
ylab("Covariate")
#xlim(0,600) #excluding point estimates above 600km2 in the graph just so we can visually inspect the smaller sizes
#theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
#ggtitle("AKDE_95 Size")
#Remove the intercept from the model
#akde_summary = akde_summary[-c(1),]
akde_summary=as.data.frame(akde_summary)
akde_summary2 = akde_summary%>%
dplyr::select(!Effect=="intrcpt")
str(akde_summary)
#Remove the intercept from the model
akde_summary = akde_summary[-c(1),]
akde_summary=as.data.frame(akde_summary)
akde_summary
#Generating a quick plot to visualize effect sizes as a forest plot
ggplot(data=akde_summary,aes(x=beta, y= Effect))+
geom_point()+
geom_vline(xintercept = 0, linetype="dotted", color="red", size=1.5)+
geom_errorbar(aes(xmin = CI_lower, xmax =CI_upper))+
xlab("Effect Size on 95% AKDE")+
ylab("Covariate")
#xlim(0,600) #excluding
top_model = meta_speed14
speed_summary = as.data.frame(top_model[2])
speed_summary <- as.data.frame(tibble::rownames_to_column(speed_summary, "Effect"))
speed_summary$se = top_model[3]
speed_summary$se = top_model$se
speed_summary$CI_lower = top_model$ci.lb
speed_summary$CI_upper = top_model$ci.ub
#Remove the intercept from the model
speed_summary2 = speed_summary %>%
dplyr::filter(!Effect=="intrcpt")
head(speed_summary2)
top_model1 = meta14
akde_summary = as.data.frame(top_model1[2])
akde_summary <- as.data.frame(tibble::rownames_to_column(akde_summary, "Effect"))
akde_summary$se = top_model1[3]
akde_summary$se = top_model1$se
akde_summary$CI_lower = top_model1$ci.lb
akde_summary$CI_upper = top_model1$ci.ub
#Remove the intercept from the model
akde_summary = akde_summary %>%
dplyr::filter(!Effect =="intrcpt")
akde_summary
View(akde_summary)
library(rgee)
ee_Initialize()
createTimeBand <-function(img) {
year <- ee$Date(img$get('system:time_start'))$get('year')$subtract(1991L)
ee$Image(year)$byte()$addBands(img)
}
collection <- ee$
ImageCollection('NOAA/DMSP-OLS/NIGHTTIME_LIGHTS')$
select('stable_lights')$
map(createTimeBand)
col_reduce <- collection$reduce(ee$Reducer$linearFit())
col_reduce <- col_reduce$addBands(
col_reduce$select('scale'))
ee_print(col_reduce)
Map$setCenter(9.08203, 47.39835, 3)
Map$addLayer(
eeObject = col_reduce,
visParams = list(
bands = c("scale", "offset", "scale"),
min = 0,
max = c(0.18, 20, -0.18)
),
name = "stable lights trend"
)
library(tidyverse)
library(rgee)
library(sf)
ee_Initialize()
nc <- st_read(system.file("shape/nc.shp", package = "sf"), quiet = TRUE)
plot(nc)
terraclimate <- ee$ImageCollection("IDAHO_EPSCOR/TERRACLIMATE") %>%
ee$ImageCollection$filterDate("2001-01-01", "2002-01-01") %>%
ee$ImageCollection$map(function(x) x$select("pr")) %>% # Select only precipitation bands
ee$ImageCollection$toBands() %>% # from imagecollection to image
ee$Image$rename(sprintf("PP_%02d",1:12)) # rename the bands of an image
ee_nc_rain <- ee_extract(x = terraclimate, y = nc["NAME"], sf = FALSE)
ee_Initialize()
nc <- st_read(system.file("shape/nc.shp", package = "sf"), quiet = TRUE)
terraclimate <- ee$ImageCollection("IDAHO_EPSCOR/TERRACLIMATE") %>%
ee$ImageCollection$filterDate("2001-01-01", "2002-01-01") %>%
ee$ImageCollection$map(function(x) x$select("pr")) %>% # Select only precipitation bands
ee$ImageCollection$toBands() %>% # from imagecollection to image
ee$Image$rename(sprintf("PP_%02d",1:12)) # rename the bands of an image
ee_nc_rain <- ee_extract(x = terraclimate, y = nc["NAME"], sf = FALSE)
ee_nc_rain %>%
pivot_longer(-NAME, names_to = "month", values_to = "pr") %>%
mutate(month, month=gsub("PP_", "", month)) %>%
ggplot(aes(x = month, y = pr, group = NAME, color = pr)) +
geom_line(alpha = 0.4) +
xlab("Month") +
ylab("Precipitation (mm)") +
theme_minimal()
#https://github.com/r-spatial/rgee
#CREATE NDVI ANIMATION FROM GOOGLE EARTH ENGINE
library(magick)
library(rgee)
library(sf)
ee_Initialize()
mask <- system.file("shp/arequipa.shp", package = "rgee") %>%
st_read(quiet = TRUE) %>%
sf_as_ee()
region <- mask$geometry()$bounds()
col <- ee$ImageCollection('MODIS/006/MOD13A2')$select('NDVI')
col <- col$map(function(img) {
doy <- ee$Date(img$get('system:time_start'))$getRelative('day', 'year')
img$set('doy', doy)
})
distinctDOY <- col$filterDate('2013-01-01', '2014-01-01')
filter <- ee$Filter$equals(leftField = 'doy', rightField = 'doy')
join <- ee$Join$saveAll('doy_matches')
joinCol <- ee$ImageCollection(join$apply(distinctDOY, col, filter))
comp <- joinCol$map(function(img) {
doyCol = ee$ImageCollection$fromImages(
img$get('doy_matches')
)
doyCol$reduce(ee$Reducer$median())
})
visParams = list(
min = 0.0,
max = 9000.0,
bands = "NDVI_median",
palette = c(
'FFFFFF', 'CE7E45', 'DF923D', 'F1B555', 'FCD163', '99B718', '74A901',
'66A000', '529400', '3E8601', '207401', '056201', '004C00', '023B01',
'012E01', '011D01', '011301'
)
)
rgbVis <- comp$map(function(img) {
do.call(img$visualize, visParams) %>%
ee$Image$clip(mask)
})
gifParams <- list(
region = region,
dimensions = 600,
crs = 'EPSG:3857',
framesPerSecond = 10
)
dates_modis_mabbr <- distinctDOY %>%
ee_get_date_ic %>% # Get Image Collection dates
'[['("time_start") %>% # Select time_start column
lubridate::month() %>% # Get the month component of the datetime
'['(month.abb, .) # subset around month abbreviations
animation <- ee_utils_gif_creator(rgbVis, gifParams, mode = "wb")
animation %>%
ee_utils_gif_annotate(
text = "NDVI: MODIS/006/MOD13A2",
size = 15, color = "white",
location = "+10+10"
) %>%
ee_utils_gif_annotate(
text = dates_modis_mabbr,
size = 30,
location = "+290+350",
color = "white",
font = "arial",
boxcolor = "#000000"
) # -> animation_wtxt
# ee_utils_gif_save(animation_wtxt, path = "raster_as_ee.gif")
########################################
# Generating spatiotemporally explicit NDVI values for coordinate fixes in a telemetry dataset
#Author: Michael Butler Brown
#Author Affiliations: Smithsonian Conservation Biology Institute and Giraffe Conservation Foundation
#Load and prepare tracking data
#NOTE: This script takes a while to run and will probably crash if you run it locally without partitioning the data...I've added a block of code for separating the dataframe by country, site, or operation
#Start Fresh
rm(list=ls())
library(sf)
library(dplyr)
library(move)
library(geojsonio)
#Set Working Directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Read in Movement Data
#Load Data
#Note: These data have already been filtered using the following criteria
##Start the day after the unit was deployed
##Stop the day before the unit went stationary or failed
##Stop on January 1, 2022
##All times are local time at the location the unit was deployed
data = read.csv(file="../Data/data_continental.csv", header = TRUE, sep =",")
#Format datetime to class POSIxCT
data$dt <- as.POSIXct(strptime(data$dt, "%Y-%m-%d %H:%M:%S", tz = "UTC")) #Turn date to class POSIXct
data1= data #rename to maintain integrity
data1$ID = as.character(data1$ID)
trackdata = data1 %>%
#dplyr::filter(Park_location == "Northwest")%>%
#dplyr::filter(ID %in% select2)%>%
#dplyr::filter(ID =="0-3601936")%>%
#dplyr::filter(Country == "Tanzania")%>%
dplyr::filter(Operation == "Namibia_2019")%>%
#dplyr::filter(Park_location %in% c("Makalali","Selati","Kruger_Balule","Leparua","Loisaba"))%>%
dplyr::select(ID,Name,LATITUDE,LONGITUDE,dt,Operation,BATTERY,Park_location,Country,species,subspecies,HACCURACY)#%>%
data$BATTERY = as.numeric(data$BATTERY)
data=droplevels(data)
dim(data)
dim(trackdata)
trackdata=droplevels(trackdata)
str(trackdata)
trackdata$Date <- as.Date(trackdata$dt)
trackdata$Date <- as.factor(trackdata$Date)
trackdata$index <- seq(1:nrow(trackdata))
head(trackdata)
datasf <- trackdata %>%
dplyr::select(ID,index,Date,LATITUDE,LONGITUDE)
datasf <- st_as_sf(datasf, coords = c('LONGITUDE','LATITUDE'), crs = 4326)
head(datasf)
plot(datasf)
copernicus <- ee$ImageCollection("COPERNICUS/Landcover/100m/Proba-V-C3/Global") %>%
#ee$ImageCollection$filterDate("2001-01-01", "2002-01-01") %>%
#ee$ImageCollection$map(function(x) x$select("pr")) %>% # Select only precipitation bands
ee$ImageCollection$toBands()
ee_datasf_copernicus <- ee_extract(x = copernicus, y = datasf["NAME"], sf = FALSE)
ee_datasf_copernicus <- ee_extract(x = copernicus, y = datasf["ID"], sf = FALSE)
head(ee_datasf_copernicus)
ee_datasf_copernicus
head(trackdata)
unique(trackdata$ID)
trial = trackdata %>%
dplyr::group_by(ID)%>%
dplyr::summarise(total=n())
trial
########################################
# Generating spatiotemporally explicit NDVI values for coordinate fixes in a telemetry dataset
#Author: Michael Butler Brown
#Author Affiliations: Smithsonian Conservation Biology Institute and Giraffe Conservation Foundation
#Load and prepare tracking data
#NOTE: This script takes a while to run and will probably crash if you run it locally without partitioning the data...I've added a block of code for separating the dataframe by country, site, or operation
#Start Fresh
rm(list=ls())
library(sf)
library(dplyr)
library(move)
library(geojsonio)
#Set Working Directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Read in Movement Data
#Load Data
#Note: These data have already been filtered using the following criteria
##Start the day after the unit was deployed
##Stop the day before the unit went stationary or failed
##Stop on January 1, 2022
##All times are local time at the location the unit was deployed
data = read.csv(file="../Data/data_continental.csv", header = TRUE, sep =",")
#Format datetime to class POSIxCT
data$dt <- as.POSIXct(strptime(data$dt, "%Y-%m-%d %H:%M:%S", tz = "UTC")) #Turn date to class POSIXct
#Final filtering and formatting of master dataframe
data1= data #rename to maintain integrity
data1$ID = as.character(data1$ID)
trackdata = data1 %>%
#dplyr::filter(Park_location == "Northwest")%>%
#dplyr::filter(ID %in% select2)%>%
#dplyr::filter(ID =="0-3601936")%>%
dplyr::filter(ID =="IRI2016-3322")%>%
#dplyr::filter(Country == "Tanzania")%>%
dplyr::filter(Operation == "Namibia_2019")%>%
#dplyr::filter(Park_location %in% c("Makalali","Selati","Kruger_Balule","Leparua","Loisaba"))%>%
dplyr::select(ID,Name,LATITUDE,LONGITUDE,dt,Operation,BATTERY,Park_location,Country,species,subspecies,HACCURACY)#%>%
data$BATTERY = as.numeric(data$BATTERY)
data=droplevels(data)
dim(data)
dim(trackdata)
trackdata=droplevels(trackdata)
str(trackdata)
trackdata$Date <- as.Date(trackdata$dt)
trackdata$Date <- as.factor(trackdata$Date)
trackdata$index <- seq(1:nrow(trackdata))
head(trackdata)
datasf <- trackdata %>%
dplyr::select(ID,index,Date,LATITUDE,LONGITUDE)
datasf <- st_as_sf(datasf, coords = c('LONGITUDE','LATITUDE'), crs = 4326)
head(datasf)
plot(datasf)
#######################################
# Initialize rgee
library(rgee)
#ee_Initialize(email='mbbrown62@gmail.com',drive=TRUE, gcs=TRUE)
ee_Initialize()
ee_check()
##############################
ee.ImageCollection("COPERNICUS/Landcover/100m/Proba-V-C3/Global")
copernicus <- ee$ImageCollection("COPERNICUS/Landcover/100m/Proba-V-C3/Global") %>%
#ee$ImageCollection$filterDate("2001-01-01", "2002-01-01") %>%
#ee$ImageCollection$map(function(x) x$select("discrete_classification")) %>% # Select only precipitation bands
ee$ImageCollection$toBands() %>% # from imagecollection to image
#ee$Image$rename(sprintf("PP_%02d",1:12)) # rename the bands of an image
ee_datasf_copernicus <- ee_extract(x = copernicus, y = datasf["ID"], sf = FALSE)
copernicus <- ee$ImageCollection("COPERNICUS/Landcover/100m/Proba-V-C3/Global") %>%
#ee$ImageCollection$map(function(x) x$select("discrete_classification")) %>% # Select only precipitation bands
ee$ImageCollection$toBands()
ee_datasf_copernicus <- ee_extract(x = copernicus, y = datasf["ID"], sf = FALSE)
trackdata = trackdata[1:10, ]
dim(trackdata)
########################################
# Generating spatiotemporally explicit NDVI values for coordinate fixes in a telemetry dataset
#Author: Michael Butler Brown
#Author Affiliations: Smithsonian Conservation Biology Institute and Giraffe Conservation Foundation
#Load and prepare tracking data
#NOTE: This script takes a while to run and will probably crash if you run it locally without partitioning the data...I've added a block of code for separating the dataframe by country, site, or operation
#Start Fresh
rm(list=ls())
library(sf)
library(dplyr)
library(move)
library(geojsonio)
#Set Working Directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Read in Movement Data
#Load Data
#Note: These data have already been filtered using the following criteria
##Start the day after the unit was deployed
##Stop the day before the unit went stationary or failed
##Stop on January 1, 2022
##All times are local time at the location the unit was deployed
data = read.csv(file="../Data/data_continental.csv", header = TRUE, sep =",")
#Format datetime to class POSIxCT
data$dt <- as.POSIXct(strptime(data$dt, "%Y-%m-%d %H:%M:%S", tz = "UTC")) #Turn date to class POSIXct
#Final filtering and formatting of master dataframe
data1= data #rename to maintain integrity
data1$ID = as.character(data1$ID)
trackdata = data1 %>%
#dplyr::filter(Park_location == "Northwest")%>%
#dplyr::filter(ID %in% select2)%>%
#dplyr::filter(ID =="0-3601936")%>%
dplyr::filter(ID =="IRI2016-3322")%>%
#dplyr::filter(Country == "Tanzania")%>%
dplyr::filter(Operation == "Namibia_2019")%>%
#dplyr::filter(Park_location %in% c("Makalali","Selati","Kruger_Balule","Leparua","Loisaba"))%>%
dplyr::select(ID,Name,LATITUDE,LONGITUDE,dt,Operation,BATTERY,Park_location,Country,species,subspecies,HACCURACY)#%>%
data$BATTERY = as.numeric(data$BATTERY)
data=droplevels(data)
dim(data)
dim(trackdata)
trackdata = trackdata[1:10, ]
trackdata=droplevels(trackdata)
str(trackdata)
trackdata$Date <- as.Date(trackdata$dt)
trackdata$Date <- as.factor(trackdata$Date)
trackdata$index <- seq(1:nrow(trackdata))
head(trackdata)
datasf <- trackdata %>%
dplyr::select(ID,index,Date,LATITUDE,LONGITUDE)
datasf <- st_as_sf(datasf, coords = c('LONGITUDE','LATITUDE'), crs = 4326)
head(datasf)
dim(datasf)
plot(datasf)
#######################################
# Initialize rgee
library(rgee)
#ee_Initialize(email='mbbrown62@gmail.com',drive=TRUE, gcs=TRUE)
ee_Initialize()
ee_check()
##############################
ee.ImageCollection("COPERNICUS/Landcover/100m/Proba-V-C3/Global")
copernicus <- ee$ImageCollection("COPERNICUS/Landcover/100m/Proba-V-C3/Global") %>%
#ee$ImageCollection$filterDate("2001-01-01", "2002-01-01") %>%
#ee$ImageCollection$map(function(x) x$select("discrete_classification")) %>% # Select only precipitation bands
ee$ImageCollection$toBands() %>% # from imagecollection to image
#ee$Image$rename(sprintf("PP_%02d",1:12)) # rename the bands of an image
ee_datasf_copernicus <- ee_extract(x = copernicus, y = datasf["ID"], sf = FALSE)
??ee_extract()
copernicus <- ee$ImageCollection("COPERNICUS/Landcover/100m/Proba-V-C3/Global") %>%
#ee$ImageCollection$filterDate("2001-01-01", "2002-01-01") %>%
#ee$ImageCollection$map(function(x) x$select("discrete_classification")) %>% # Select only precipitation bands
ee$ImageCollection$toBands() %>% # from imagecollection to image
#ee$Image$rename(sprintf("PP_%02d",1:12)) # rename the bands of an image
ee_datasf_copernicus <- ee_extract(x = copernicus, y = datasf)
copernicus <- ee$ImageCollection("COPERNICUS/Landcover/100m/Proba-V-C3/Global")
ee_datasf_copernicus <- ee_extract(x = copernicus, y = datasf)
ee_datasf_copernicus
str(ee_datasf_copernicus)
copernicus <- ee$ImageCollection("COPERNICUS/Landcover/100m/Proba-V-C3/Global") %>%
#ee$ImageCollection$filterDate("2001-01-01", "2002-01-01") %>%
ee$ImageCollection$map(function(x) x$select("X2019_shrub.coverfraction"))
ee_datasf_copernicus <- ee_extract(x = copernicus, y = datasf)
copernicus <- ee$ImageCollection("COPERNICUS/Landcover/100m/Proba-V-C3/Global") %>%
#ee$ImageCollection$filterDate("2001-01-01", "2002-01-01") %>%
ee$ImageCollection$map(function(x) x$select(" X2019_shrub.coverfraction"))
copernicus <- ee$ImageCollection("COPERNICUS/Landcover/100m/Proba-V-C3/Global") %>%
#ee$ImageCollection$filterDate("2001-01-01", "2002-01-01") %>%
ee$ImageCollection$map(function(x) x$select(" X2019_shrub.coverfraction")) %>% # Select only precipitation bands
ee$ImageCollection$toBands() %>% # from imagecollection to image
#ee$Image$rename(sprintf("PP_%02d",1:12)) # rename the bands of an image
ee_datasf_copernicus <- ee_extract(x = copernicus, y = datasf)
copernicus <- ee$ImageCollection("COPERNICUS/Landcover/100m/Proba-V-C3/Global") %>%
#ee$ImageCollection$filterDate("2001-01-01", "2002-01-01") %>%
ee$ImageCollection$map(function(x) x$select("tree-coverfraction")) %>% # Select only precipitation bands
ee$ImageCollection$toBands() %>% # from imagecollection to image
#ee$Image$rename(sprintf("PP_%02d",1:12)) # rename the bands of an image
ee_datasf_copernicus <- ee_extract(x = copernicus, y = datasf)
